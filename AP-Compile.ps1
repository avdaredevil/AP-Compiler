<#
|==============================================================================>|
   AP-Compiler by APoorv Verma [AP] on 4/21/2014
|==============================================================================>|
      $) Compiles AP-Programs Independent of the AP-Modules file
      $) Reads And Calculates all the Modules needed!
      $) Adds code with comment in a neat BASE64 Code
      $) Has a blacklisting system
      $) Code layout detection
      $) Inject Point Detection
|==============================================================================>|
#>
param([Parameter(Mandatory=$True)][String]$File,[String]$OutputFolder = '.',[switch]$OverwriteSrc,[Switch]$Dbg,[Switch]$PassThru)
# =======================================START=OF=COMPILER==========================================================|
#    The Following Code was added by AP-Compiler Version [1.2] To Make this program independent of AP-Core Engine
#    GitHub: https://github.com/avdaredevil/AP-Compiler
# ==================================================================================================================|
$Script:PSHell=$(if($PSHell){$PSHell}elseif($PSScriptRoot){$PSScriptRoot}else{"."});
iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("")))
# ========================================END=OF=COMPILER===========================================================|

$Ver = '1.2'
if (!$File -or !(Test-Path -type Leaf $File)) {Throw "Invalid File";exit}
if (!(Test-Path -type Container $OutputFolder)) {Throw "Invalid Folder";exit}
$File = (Get-Item $File).FullName
$OutputFolder = (Get-Item $OutputFolder).FullName
$Modules = $Dep | % {$_[0]};$TmpHash = @{};$Modules | % {$TmpHash.$_ = $_}
$Aliases = Get-Alias | ? {$TmpHash.($_.Definition)} | % {"$_"}
$Data = [IO.File]::ReadAllLines($File)
$Script:OtroFunc = @{}
$Script:Need2Import = @{}
$Script:Need2ImportAL = @{}
$Script:BlackListFunctions = @{"IN-Code-Debug-Console"=1;"Get-APIKey"=1;"Get-GMAIL"=1;"Backup"=1}
#$BEG = "((^|[\(;\=])( ?)+)";$END = "( ?)+((\S+ )+(\S+))?([;\)\(""]|$)"  | "$BEG$([Regex]::Escape($_))$END"
foreach ($Ln in $Data) {
    if ($LN -match "^ +function.+\b(?<Name>\w+)\b( ?)+{") {$OtroFunc.($Matches.Name) = "Added";continue}
    $Modules | ? {$LN -match "\b$([Regex]::Escape($_))\b"} | % {$Need2Import.$_++}
    $Aliases | ? {$LN -match "$([Regex]::Escape($_))"} | % {$Need2ImportAL.$_++;$Need2Import.((Get-Alias $_).Definition)++}
}
if ($Need2Import.KeyPressed) {"KeyTranslate","KeyPressedCode" | % {$Need2Import.$_++};Write-AP "+Added AP-KeyPress Support"}
if ($Need2Import.Keys | ? {$_ -match "\-path$"}) {"Fix-Path","Set-Path","Get-Path","Remove-FromPath","Add-ToPath" | % {$Need2Import.$_++};Write-AP "+Added AP-Path Support"}
$Need2Import."AP-Require"++
$Need2Import."Get-Where"++
$FinalSet = @($Need2Import.Keys) | ? {!$OtroFunc.$_}
$FinalAlSet = @($Need2ImportAL.Keys) | select -unique
$Code = $FinalSet | % {"function $_ {1}{0}{2}" -f $(if ($BlackListFunctions.$_) {"Write-Host -f yellow '[AP-COMPILER] Module [$_] disabled for this program'"} else {iex "`${Function:$_}"}),"{","}`n"}
$Code += $FinalAlSet | % {"Set-Alias $_ {0}" -f ((Get-Alias $_).Definition)}
if ($Code) {
    if ($FinalSet) {Write-AP "*Adding Functions $(Print-List $FinalSet)"}
    if ($FinalALSet) {Write-AP "*Adding Aliases   $(Print-List $FinalALSet)"}
    $Injecter = "",
    "# =======================================START=OF=COMPILER==========================================================|",
    "#    The Following Code was added by AP-Compiler Version [$Ver] To Make this program independent of AP-Core Engine",
    "#    GitHub: https://github.com/avdaredevil/AP-Compiler",
    "# ==================================================================================================================|",
    '$Script:PSHell=$(if($PSHell){$PSHell}elseif($PSScriptRoot){$PSScriptRoot}else{"."});',"iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String(""$(Convert-ToBase64 ($Code -join "`n"))"")))",
    "# ========================================END=OF=COMPILER===========================================================|",
    "" -join "`n"
}
$Data = $Data -join "`n"
if ($Data -match "`n\[CmdletBinding\(\)\] *`n") {Write-AP "*Detected Procedural Layout"
    $M = [Regex]::Match($Data,"(Begin|Process|End) *\{")
    if (!$M.success) {Write-AP ">!No Begin/Process/End Tags found... Please check that your code is runnable?"}
    else {$Data = $Data.insert($M.Index+$M.Length,$Injecter)}
}else{Write-AP "*Detected Linear Layout"
    $M = [Regex]::Match($Data,"(?i)(`n|^)param *\(")
    if (!$M.success) {$Data = "$Injecter$Data"} else {
        $i = 1;$dex=0;$InString=0
        foreach ($c in $Data[($M.Index+$M.Length)..$Data.Length]) {$dex++
            if ($Dbg) {Write-AP ">*Explored $c [Stack: $i |$Dex :: $InString -> $(('Code','Dbl-Quot','Single-Quot')[$InString])]"}
            if ($InString -ne 2 -and $c -eq """") {$InString=(1,0)[$InString]}
            elseif ($InString -ne 1 -and $c -eq "'") {$InString=(2,-1,0)[$InString]}
            elseif ($InString) {continue}
            if ($c -eq "(") {$i++}
            elseif ($c -eq ")") {if (!(--$i)) {break}}
        }
        $Data = $Data.insert($M.Index+$M.Length+$dex,$Injecter)
    }
}
if ((Split-Path $File) -eq $OutputFolder -and !$OverwriteSrc) {
    $Outfile = "$((Split-Path -leaf $File).replace('.ps1','-Compiled.ps1'))"
} else {$Outfile = "$(Split-Path -leaf $File)"}
Write-AP "+Compiled [$OutFile]"
$Data | Out-File -Encoding (JS-OR {$e=Get-FileEncoding $File;if($e -in "utf32","unicode","bigendianunicod"){""}else{$e}} "utf8") "$OutputFolder\$OutFile"
if ($PassThru) {return $code}
